<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Instrumentation.SqlClient</name>
    </assembly>
    <members>
        <member name="M:OpenTelemetry.Instrumentation.DiagnosticSourceSubscriber.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.InstrumentationEventSource">
            <summary>
            EventSource events emitted from the project.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.ListenerHandler">
            <summary>
            ListenerHandler base class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> class.
            </summary>
            <param name="sourceName">The name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.</param>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SourceName">
            <summary>
            Gets the name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SupportsNullActivity">
            <summary>
            Gets a value indicating whether the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> supports NULL <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.OnEventWritten(System.String,System.Object)">
            <summary>
            Method called for an event which does not have 'Start', 'Stop' or 'Exception' as suffix.
            </summary>
            <param name="name">Custom name.</param>
            <param name="payload">An object that represent the value being passed as a payload for the event.</param>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.PropertyFetcher`1">
            <summary>
            PropertyFetcher fetches a property from an object.
            </summary>
            <typeparam name="T">The type of the property being fetched.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.PropertyFetcher`1"/> class.
            </summary>
            <param name="propertyName">Property name to fetch.</param>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.Fetch(System.Object)">
            <summary>
            Fetch the property from the object.
            </summary>
            <param name="obj">Object to be fetched.</param>
            <returns>Property fetched.</returns>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.TryFetch(System.Object,`0@,System.Boolean)">
            <summary>
            Try to fetch the property from the object.
            </summary>
            <param name="obj">Object to be fetched.</param>
            <param name="value">Fetched value.</param>
            <param name="skipObjNullCheck">Set this to <see langword= "true"/> if we know <paramref name="obj"/> is not <see langword= "null"/>.</param>
            <returns><see langword= "true"/> if the property was fetched.</returns>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.SqlClient.Implementation.SqlActivitySourceHelper">
            <summary>
            Helper class to hold common properties used by both SqlClientDiagnosticListener on .NET Core
            and SqlEventSourceListener on .NET Framework.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.SqlClient.Implementation.SqlClientInstrumentationEventSource">
            <summary>
            EventSource events emitted from the project.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation">
            <summary>
            SqlClient instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation.#ctor(OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation"/> class.
            </summary>
            <param name="options">Configuration options for sql instrumentation.</param>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions">
            <summary>
            Options for <see cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation"/>.
            </summary>
            <remarks>
            For help and examples see: <a href="https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/src/OpenTelemetry.Instrumentation.SqlClient/README.md#advanced-configuration" />.
            </remarks>
        </member>
        <member name="F:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.NamedPipeRegex">
            <summary>
            In a Data Source string like "np:\\serverName\pipe\MSSQL$instanceName\pipeName" match the
            "pipe\MSSQL$instanceName" segment to extract instanceName if it is available.
            </summary>
            <see>
            <a href="https://docs.microsoft.com/previous-versions/sql/sql-server-2016/ms189307(v=sql.130)"/>
            </see>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.SetDbStatementForStoredProcedure">
            <summary>
            Gets or sets a value indicating whether or not the <see
            cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation"/> should add the names of <see
            cref="F:System.Data.CommandType.StoredProcedure"/> commands as the <see
            cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeDbStatement"/> tag. Default
            value: <see langword="true"/>.
            </summary>
            <remarks>
            <para><b>SetDbStatementForStoredProcedure is only supported on .NET
            and .NET Core runtimes.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.SetDbStatementForText">
            <summary>
            Gets or sets a value indicating whether or not the <see
            cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation"/> should add the text of commands as
            the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeDbStatement"/> tag.
            Default value: <see langword="false"/>.
            </summary>
            <remarks>
            <para>
            <b>WARNING: SetDbStatementForText will capture the raw
            <c>CommandText</c>. Make sure your <c>CommandText</c> property never
            contains any sensitive data.</b>
            </para>
            <para><b>SetDbStatementForText is supported on all runtimes.</b>
            <list type="bullet">
            <item>On .NET and .NET Core SetDbStatementForText only applies to
            <c>SqlCommand</c>s with <see cref="F:System.Data.CommandType.Text"/>.</item>
            <item>On .NET Framework SetDbStatementForText applies to all
            <c>SqlCommand</c>s regardless of <see cref="T:System.Data.CommandType"/>.
            <list type="bullet">
            <item>When using <c>System.Data.SqlClient</c> use
            SetDbStatementForText to capture StoredProcedure command
            names.</item>
            <item>When using <c>Microsoft.Data.SqlClient</c> use
            SetDbStatementForText to capture Text, StoredProcedure, and all
            other command text.</item>
            </list></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.EnableConnectionLevelAttributes">
            <summary>
            Gets or sets a value indicating whether or not the <see
            cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentation"/> should parse the DataSource on a
            SqlConnection into server name, instance name, and/or port
            connection-level attribute tags. Default value: <see
            langword="false"/>.
            </summary>
            <remarks>
            <para>
            <b>EnableConnectionLevelAttributes is supported on all runtimes.</b>
            </para>
            <para>
            The default behavior is to set the SqlConnection DataSource as the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributePeerService"/> tag.
            If enabled, SqlConnection DataSource will be parsed and the server name will be sent as the
            <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeNetPeerName"/> or <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeNetPeerIp"/> tag,
            the instance name will be sent as the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeDbMsSqlInstanceName"/> tag,
            and the port will be sent as the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeNetPeerPort"/> tag if it is not 1433 (the default port).
            </para>
            <para>
            If the environment variable OTEL_SEMCONV_STABILITY_OPT_IN is set to "http", the newer Semantic Convention v1.21.0 Attributes will be emitted.
            SqlConnection DataSource will be parsed and the server name will be sent as the
            <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeServerAddress"/> or <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeServerSocketAddress"/> tag,
            the instance name will be sent as the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeDbMsSqlInstanceName"/> tag,
            and the port will be sent as the <see cref="F:OpenTelemetry.Trace.SemanticConventions.AttributeServerPort"/> tag if it is not 1433 (the default port).
            </para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.Enrich">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with the
            raw <c>SqlCommand</c> object.
            </summary>
            <remarks>
            <para><b>Enrich is only executed on .NET and .NET Core
            runtimes.</b></para>
            The parameters passed to the enrich action are:
            <list type="number">
            <item>The <see cref="T:System.Diagnostics.Activity"/> being enriched.</item>
            <item>The name of the event. Currently only <c>"OnCustom"</c> is
            used but more events may be added in the future.</item>
            <item>The raw <c>SqlCommand</c> object from which additional
            information can be extracted to enrich the <see
            cref="T:System.Diagnostics.Activity"/>.</item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.Filter">
            <summary>
            Gets or sets a filter function that determines whether or not to
            collect telemetry about a command.
            </summary>
            <remarks>
            <para><b>Filter is only executed on .NET and .NET Core
            runtimes.</b></para>
            Notes:
            <list type="bullet">
            <item>The first parameter passed to the filter function is the raw
            <c>SqlCommand</c> object for the command being executed.</item>
            <item>The return value for the filter function is interpreted as:
            <list type="bullet">
            <item>If filter returns <see langword="true" />, the command is
            collected.</item>
            <item>If filter returns <see langword="false" /> or throws an
            exception the command is NOT collected.</item>
            </list></item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions.RecordException">
            <summary>
            Gets or sets a value indicating whether the exception will be
            recorded as <see cref="T:System.Diagnostics.ActivityEvent"/> or not. Default value: <see
            langword="false"/>.
            </summary>
            <remarks>
            <para><b>RecordException is only supported on .NET and .NET Core
            runtimes.</b></para>
            <para>For specification details see: <see
            href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/exceptions.md"/>.</para>
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Trace.ActivityHelperExtensions">
            <summary>
            Extension methods on Activity.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryGetStatus(System.Diagnostics.Activity,OpenTelemetry.Trace.StatusCode@,System.String@)">
            <summary>
            Gets the status of activity execution.
            Activity class in .NET does not support 'Status'.
            This extension provides a workaround to retrieve Status from special tags with key name otel.status_code and otel.status_description.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="statusCode"><see cref="T:OpenTelemetry.Trace.StatusCode"/>.</param>
            <param name="statusDescription">Status description.</param>
            <returns><see langword="true"/> if <see cref="T:OpenTelemetry.Trace.Status"/> was found on the supplied Activity.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.GetTagValue(System.Diagnostics.Activity,System.String)">
            <summary>
            Gets the value of a specific tag on an <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Case-sensitive tag name to retrieve.</param>
            <returns>Tag value or null if a match was not found.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryCheckFirstTag(System.Diagnostics.Activity,System.String,System.Object@)">
            <summary>
            Checks if the user provided tag name is the first tag of the <see cref="T:System.Diagnostics.Activity"/> and retrieves the tag value.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Tag name.</param>
            <param name="tagValue">Tag value.</param>
            <returns><see langword="true"/> if the first tag of the supplied Activity matches the user provide tag name.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.SemanticConventions">
            <summary>
            Constants for semantic attribute names outlined by the OpenTelemetry specifications.
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md"/> and
            <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/semantic_conventions/README.md"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanAttributeConstants">
            <summary>
            Defines well-known span attribute keys.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanHelper">
            <summary>
            A collection of helper methods to be used when building spans.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.SpanHelper.ResolveSpanStatusForHttpStatusCode(System.Diagnostics.ActivityKind,System.Int32)">
            <summary>
            Helper method that populates span properties from http status code according
            to https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md#status.
            </summary>
            <param name="kind">The span kind.</param>
            <param name="httpStatusCode">Http status code.</param>
            <returns>Resolved span <see cref="T:OpenTelemetry.Trace.Status"/> for the Http status code.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions">
            <summary>
            Extension methods to simplify registering of dependency instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddSqlClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Enables SqlClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddSqlClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions})">
            <summary>
            Enables SqlClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <param name="configureSqlClientInstrumentationOptions">Callback action for configuring <see cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddSqlClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder,System.String,System.Action{OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions})">
            <summary>
            Enables SqlClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <param name="name">Name which is used when retrieving options.</param>
            <param name="configureSqlClientInstrumentationOptions">Callback action for configuring <see cref="T:OpenTelemetry.Instrumentation.SqlClient.SqlClientInstrumentationOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.ExceptionExtensions.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
            <param name="exception">Exception to convert to string.</param>
            <returns>Exception as string with no culture.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.HttpSemanticConventionHelper">
            <summary>
            Helper class for Http Semantic Conventions.
            </summary>
            <remarks>
            Due to a breaking change in the semantic convention, affected instrumentation libraries
            must inspect an environment variable to determine which attributes to emit.
            This is expected to be removed when the instrumentation libraries reach Stable.
            <see href="https://github.com/open-telemetry/semantic-conventions/blob/v1.21.0/docs/http/http-spans.md"/>.
            </remarks>
        </member>
        <member name="F:OpenTelemetry.Internal.HttpSemanticConventionHelper.HttpSemanticConvention.Old">
            <summary>
            Instructs an instrumentation library to emit the old experimental HTTP attributes.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Internal.HttpSemanticConventionHelper.HttpSemanticConvention.New">
            <summary>
            Instructs an instrumentation library to emit the new, v1.21.0 Http attributes.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Internal.HttpSemanticConventionHelper.HttpSemanticConvention.Dupe">
            <summary>
            Instructs an instrumentation library to emit both the old and new attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Allows capturing of the expressions passed to a method.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output is not <see langword="null"/> even if
            the corresponding type allows it. Specifies that an input argument was
            not <see langword="null"/> when the call returns.</summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider">
            <summary>
            An environment variable based <see cref="T:Microsoft.Extensions.Configuration.ConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified prefix.
            </summary>
            <param name="prefix">A prefix used to filter the environment variables.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.Load">
            <summary>
            Loads the environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider.ToString">
            <summary>
            Generates a string representing this provider name and relevant details.
            </summary>
            <returns> The configuration name. </returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource">
            <summary>
            Represents environment variables as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Prefix">
            <summary>
            A prefix used to filter environment variables.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions">
            <summary>
            Extension methods for registering <see cref="T:Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationProvider"/> with <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables
            with a specified prefix.
            </summary>
            <param name="configurationBuilder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="prefix">The prefix that environment variable names must start with. The prefix will be removed from the environment variable names.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.EnvironmentVariablesExtensions.AddEnvironmentVariables(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.EnvironmentVariables.EnvironmentVariablesConfigurationSource})">
            <summary>
            Adds an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationProvider"/> that reads configuration values from environment variables.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Options.DelegatingOptionsFactory`1">
            <summary>
            Implementation of <see cref="T:Microsoft.Extensions.Options.IOptionsFactory`1"/>.
            </summary>
            <typeparam name="TOptions">The type of options being requested.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.Options.DelegatingOptionsFactory`1.#ctor(System.Func{Microsoft.Extensions.Configuration.IConfiguration,System.String,`0},Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IPostConfigureOptions{`0}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Options.IValidateOptions{`0}})">
            <summary>
            Initializes a new instance with the specified options configurations.
            </summary>
            <param name="setups">The configuration actions to run.</param>
            <param name="postConfigures">The initialization actions to run.</param>
            <param name="validations">The validations to run.</param>
        </member>
        <member name="M:Microsoft.Extensions.Options.DelegatingOptionsFactory`1.Create(System.String)">
            <summary>
            Returns a configured <typeparamref name="TOptions"/> instance with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <typeparamref name="TOptions"/> instance to create.</param>
            <returns>The created <typeparamref name="TOptions"/> instance with the given <paramref name="name"/>.</returns>
            <exception cref="T:Microsoft.Extensions.Options.OptionsValidationException">One or more <see cref="T:Microsoft.Extensions.Options.IValidateOptions`1"/> return failed <see cref="T:Microsoft.Extensions.Options.ValidateOptionsResult"/> when validating the <typeparamref name="TOptions"/> instance been created.</exception>
            <exception cref="T:System.MissingMethodException">The <typeparamref name="TOptions"/> does not have a public parameterless constructor or <typeparamref name="TOptions"/> is <see langword="abstract"/>.</exception>
        </member>
    </members>
</doc>
